{"version":3,"sources":["Map.js","App.js","index.js"],"names":["Map","stationUrl","stationStatusUrl","useState","lat","lng","center","setCenter","stations","setStations","stationStatuses","setStationStatuses","useEffect","a","fetch","response","json","data","fetchStations","fetchStationStatuses","currentStation","setCurrentStation","googleMapsApiKey","mapContainerStyle","width","height","zoom","options","imagePath","clusterer","map","station","i","className","key","onClick","lon","id","station_id","id_2","name","numAvailableBikes","num_bikes_available","freeSpots","num_docks_available","position","clickable","onCloseClick","App","ReactDOM","render","document","getElementById"],"mappings":"wMA+FeA,MAnFf,WACE,IAAMC,EACJ,yEAEIC,EACJ,oEALW,EAMeC,mBAAS,CAAEC,IAAK,UAAWC,IAAK,YAN/C,mBAMNC,EANM,KAMEC,EANF,OAQmBJ,mBAAS,IAR5B,mBAQNK,EARM,KAQIC,EARJ,OASiCN,mBAAS,IAT1C,mBASNO,EATM,KASWC,EATX,KAUbC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACyBC,MAAMb,GAD/B,cACQc,EADR,gBAEqBA,EAASC,OAF9B,OAEQC,EAFR,OAGER,EAAYQ,EAAKA,KAAKT,UAHxB,4CADc,kEAMd,8BAAAK,EAAA,sEACyBC,MAAMZ,GAD/B,cACQa,EADR,gBAEqBA,EAASC,OAF9B,OAEQC,EAFR,OAGEN,EAAmBM,EAAKA,KAAKT,UAH/B,4CANc,uBAAC,WAAD,wBAWdU,GAXc,mCAYdC,KACC,IACH,IAxBa,EAiC+BhB,mBAAS,IAjCxC,mBAiCNiB,EAjCM,KAiCUC,EAjCV,KAkCb,OACE,kBAAC,IAAD,CAAYC,iBAAiB,2CAC3B,kBAAC,IAAD,CACEC,kBAboB,CACxBC,MAAO,QACPC,OAAQ,SAYJC,KA/BO,GAgCPpB,OAAQA,GAER,kBAAC,IAAD,CAAiBqB,QAZP,CACdC,UACE,4FAWK,SAACC,GAAD,OACCrB,EAASsB,KAAI,SAACC,EAASC,GAAV,OACX,kBAAC,IAAD,CACEC,UAAU,SACVC,IAAKF,EACLG,QAAS,WACP5B,EAAU,CAAEH,IAAK2B,EAAQ3B,IAAKC,IAAK0B,EAAQK,MAC3Cf,EAAkB,CAChBgB,GAAI3B,EAAgBsB,GAAGM,WACvBC,KAAMR,EAAQO,WACdE,KAAMT,EAAQS,KACdpC,IAAK2B,EAAQ3B,IACbgC,IAAKL,EAAQK,IACbK,kBAAmB/B,EAAgBsB,GAAGU,oBACtCC,UAAWjC,EAAgBsB,GAAGY,uBAGlCC,SAAU,CAAEzC,IAAK2B,EAAQ3B,IAAKC,IAAK0B,EAAQK,KAC3CP,UAAWA,UAKlBT,EAAeoB,MACd,kBAAC,IAAD,CACEK,SAAU,CAAEzC,IAAKgB,EAAehB,IAAKC,IAAKe,EAAegB,KACzDU,WAAW,EACXC,aAAc,kBAAM1B,EAAkB,MAEtC,6BACE,4BAAKD,EAAeoB,MACpB,2BAAI,oBAAsBpB,EAAeqB,mBACzC,2BAAI,eAAiBrB,EAAeuB,gBC/EnCK,MAJf,WACE,OAAO,kBAAC,EAAD,OCATC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.2fdb29f3.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport {\n  GoogleMap,\n  LoadScript,\n  Marker,\n  MarkerClusterer,\n  InfoWindow,\n} from \"@react-google-maps/api\";\n\nimport \"./Map.css\";\n\nfunction Map() {\n  const stationUrl =\n    \"https://gbfs.urbansharing.com/oslobysykkel.no/station_information.json\";\n\n  const stationStatusUrl =\n    \"https://gbfs.urbansharing.com/oslobysykkel.no/station_status.json\";\n  const [center, setCenter] = useState({ lat: 59.926171, lng: 10.742574 });\n  const zoom = 13;\n  const [stations, setStations] = useState([]);\n  const [stationStatuses, setStationStatuses] = useState([]);\n  useEffect(() => {\n    async function fetchStations() {\n      const response = await fetch(stationUrl);\n      const data = await response.json();\n      setStations(data.data.stations);\n    }\n    async function fetchStationStatuses() {\n      const response = await fetch(stationStatusUrl);\n      const data = await response.json();\n      setStationStatuses(data.data.stations);\n    }\n    fetchStations();\n    fetchStationStatuses();\n  }, []);\n  const mapContainerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n  };\n\n  const options = {\n    imagePath:\n      \"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\",\n  };\n  const [currentStation, setCurrentStation] = useState({});\n  return (\n    <LoadScript googleMapsApiKey=\"AIzaSyAm5i-LiJFcXQ2eBOWwD2Jrl-akuSv8ojg\">\n      <GoogleMap\n        mapContainerStyle={mapContainerStyle}\n        zoom={zoom}\n        center={center}\n      >\n        <MarkerClusterer options={options}>\n          {(clusterer) =>\n            stations.map((station, i) => (\n              <Marker\n                className=\"marker\"\n                key={i}\n                onClick={() => {\n                  setCenter({ lat: station.lat, lng: station.lon });\n                  setCurrentStation({\n                    id: stationStatuses[i].station_id,\n                    id_2: station.station_id,\n                    name: station.name,\n                    lat: station.lat,\n                    lon: station.lon,\n                    numAvailableBikes: stationStatuses[i].num_bikes_available,\n                    freeSpots: stationStatuses[i].num_docks_available,\n                  });\n                }}\n                position={{ lat: station.lat, lng: station.lon }}\n                clusterer={clusterer}\n              ></Marker>\n            ))\n          }\n        </MarkerClusterer>\n        {currentStation.name && (\n          <InfoWindow\n            position={{ lat: currentStation.lat, lng: currentStation.lon }}\n            clickable={true}\n            onCloseClick={() => setCurrentStation({})}\n          >\n            <div>\n              <h4>{currentStation.name}</h4>\n              <p>{\"Available bikes: \" + currentStation.numAvailableBikes}</p>\n              <p>{\"Free spots: \" + currentStation.freeSpots}</p>\n            </div>\n          </InfoWindow>\n        )}\n      </GoogleMap>\n    </LoadScript>\n  );\n}\n\nexport default Map;\n","import React from \"react\";\nimport Map from \"./Map\";\n\nfunction App() {\n  return <Map />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}